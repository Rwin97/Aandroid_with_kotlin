Usar delegación de interfaz =>
La tarea anterior introdujo clases e interfaces abstractas. Delegación de interfaz es una técnica de diseño avanzada donde los métodos de una interfaz son implementados por un objeto auxiliar ( o delegado ), que luego es utilizado por una clase. Esta técnica puede ser útil cuando usa una interfaz en una serie de clases no relacionadas. Implementa la funcionalidad de interfaz necesaria en una clase auxiliar separada. Cada una de las clases no relacionadas utiliza una instancia de esa clase auxiliar para obtener la funcionalidad.

No tiene sentido hacer múltiples instancias de GoldColor, porque todos harían exactamente lo mismo. Entonces, Kotlin le permite declarar una clase en la que solo puede crear una instancia utilizando la palabra clave object en lugar de class. Kotlin creará esa instancia, y esa instancia está referenciada por el nombre de la clase. Entonces todos los demás objetos pueden usar esta instancia. No puede crear otras instancias de esta clase. Si estás familiarizado con el patrón de un solo tono, así es como implementas singletons en Kotlin.

La delegación de interfaz es poderosa y, en general, debe considerar cómo usarla siempre que pueda usar una clase abstracta en otro idioma. Le permite usar la composición para conectar comportamientos, en lugar de requerir muchas subclases, cada una especializada de una manera diferente.

La composición a menudo conduce a mejores encapsulación, más bajo acoplamiento ( interdependencia ), interfaces más limpias y código más utilizable. Por estas razones, el uso de la composición con interfaces es el diseño preferido. Por otro lado, la herencia de una clase abstracta tiende a ser una opción natural para algunos problemas. ¡Entonces deberías preferir la composición, pero cuando la herencia tiene sentido, Kotlin te permite hacer eso también!
